import de.itemis.mps.gradle.BuildLanguages
import de.itemis.mps.gradle.GenerateLibrariesXml

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */


buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://projects.itemis.de/nexus/content/repositories/mbeddr' }
    }

    dependencies {
        classpath 'de.itemis.mps:mps-gradle-plugin:1.4.258.d478f80'
    }

    configurations.classpath {
        resolutionStrategy.activateDependencyLocking()
    }
}

plugins {
    id "co.riiid.gradle" version "0.4.2"
}

apply plugin: 'base'

ext.dependencyRepositories = [
        'https://projects.itemis.de/nexus/content/repositories/mbeddr',
]

def version = "0.5"

repositories {
    for (repoUrl in project.dependencyRepositories) {
        maven {
            url repoUrl
        }
    }
    mavenCentral()
}

ext.artifactsDir = new File(rootDir, 'artifacts')
ext.mpsDir = new File(artifactsDir, 'mps')

File scriptFile(String relativePath) {
    new File("$rootDir/build/generated/$relativePath")
}

def mpsBuild = "2021.1.1"

// configs
configurations {
    mps
    ant_lib
}

dependencies {
    mps "com.jetbrains:mps:$mpsBuild"
    ant_lib "org.apache.ant:ant-junit:1.10.11"
}

dependencyLocking {
    lockAllConfigurations()
}



ext.buildScriptClasspath = project.configurations.ant_lib.fileCollection({ true })
ext.defaultScriptArgs = ["-Dversion=$version", "-Dartifacts.root=${ext.artifactsDir.getAbsolutePath()}", "-Dbuild.dir=${rootProject.projectDir.absolutePath}"]


task resolveMps(type: Copy) {
    dependsOn configurations.mps
    from {
         configurations.mps.resolve().collect { zipTree(it) }
    }
    into mpsDir
    doFirst { delete mpsDir }
}


task allScripts(type: BuildLanguages, dependsOn: [resolveMps]){
    group "generate scripts"
    scriptArgs = defaultScriptArgs
    scriptClasspath = buildScriptClasspath
    script scriptFile('build-meta.xml')
}

task build_languages(type: BuildLanguages, dependsOn: allScripts) {
    group "build"
    description "builds all languages and plugins"
    scriptArgs = defaultScriptArgs
    scriptClasspath = buildScriptClasspath
    script scriptFile('build-all.xml')
}

def releaseArtifacts = new File(artifactsDir, "ws.logv.mps.generator.editors")
        .listFiles()
        .findAll {it.name.endsWith("zip")}
        .each {it.absolutePath}

github {
    owner = 'coolya'
    repo = 'Durchblick'
    token =  System.getenv().GITHUB_TOKEN != null ? System.getenv().GITHUB_TOKEN : "empty"
    tagName =  "v-$version"
    targetCommitish = System.getenv().CI_COMMIT_SHA != null ? System.getenv().CI_COMMIT_SHA : "master"
    name =  "MPS Generator Editors $version"
    body = ReleaseNotes.getReleaseNotes(file("RELEASE_NOTES.md"))
    assets = releaseArtifacts
}

build.dependsOn build_languages
githubRelease.dependsOn build