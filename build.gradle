import de.itemis.mps.gradle.BuildLanguages
import de.itemis.mps.gradle.GenerateLibrariesXml

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */


buildscript {
    repositories {
        mavenLocal()
        maven { url 'https://projects.itemis.de/nexus/content/repositories/mbeddr' }
    }

    dependencies {
        classpath 'de.itemis.mps:mps-gradle-plugin:1.0.57.+'
    }
}

plugins {
    id "nebula.dependency-lock" version "4.9.5"
}

apply plugin: 'base'
apply plugin: "nebula.dependency-lock"

ext.dependencyRepositories = [
        'https://projects.itemis.de/nexus/content/repositories/mbeddr',
        'https://projects.itemis.de/nexus/content/repositories/mbeddr_snapshots'
]

ext.version = "0.1"

repositories {
    for (repoUrl in project.dependencyRepositories) {
        maven {
            url repoUrl
            if (project.hasProperty('nexusUsername')) {
                credentials {
                    username project.nexusUsername
                    password project.nexusPassword
                }
            }
        }
    }
    mavenCentral()
}

ext.artifactsDir = new File(rootDir, 'artifacts')
ext.mpsDir = new File(artifactsDir, 'mps')

File scriptFile(String relativePath) {
    new File("$rootDir/build/generated/$relativePath")
}

def mpsBuild = "2017.3.5"

// configs
configurations {
    mps
    mpsExtensions
    ant_lib
}

dependencies {
    mps "com.jetbrains:mps:$mpsBuild"
    mpsExtensions "de.itemis.mps:extensions:0.1+"
    ant_lib "org.apache.ant:ant-junit:1.10.1"
}

ext.buildScriptClasspath = project.configurations.ant_lib.fileCollection({ true })
ext.defaultScriptArgs = ["-Dversion=$ext.version", "-Dartifacts.root=${ext.artifactsDir.getAbsolutePath()}", "-Dbuild.dir=${rootProject.projectDir.absolutePath}"]


task resolveMps(type: Copy) {
    dependsOn configurations.mps
    from {
        configurations.mps.resolve().collect { zipTree(it) }
    }
    into mpsDir
    doFirst { delete mpsDir }
}

task resolveMpsArtifacts(type: Copy) {
    dependsOn configurations.mpsExtensions
    from {
        configurations.mpsExtensions.resolve().collect { zipTree(it) }
    }
    into artifactsDir
}

task generateLibrariesXml(type: GenerateLibrariesXml) {
    description "Will read project libraries from projectlibraries.properties and generate libraries.xml in .mps directory. Libraries are loaded in mps during start."
    defaults rootProject.file('projectlibraries.properties')
    overrides rootProject.file('projectlibraries.overrides.properties')
    destination file('.mps/libraries.xml')
}

task setup {
    dependsOn resolveMpsArtifacts
    dependsOn generateLibrariesXml
    description 'Set up MPS project libraries. Libraries are read in from projectlibraries.properties file.'
}

task allScripts(type: BuildLanguages, dependsOn: [resolveMps, resolveMpsArtifacts]){
    group "generate scripts"
    scriptArgs = defaultScriptArgs
    scriptClasspath = buildScriptClasspath
    script scriptFile('build-meta.xml')
}

task build_languages(type: BuildLanguages, dependsOn: allScripts) {
    group "build"
    description "builds all languages and plugins"
    scriptArgs = defaultScriptArgs
    scriptClasspath = buildScriptClasspath
    script scriptFile('build-all.xml')
}

build.dependsOn build_languages